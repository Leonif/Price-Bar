//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try font.validate()
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 colors.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 7 files.
  struct file {
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")
    /// Resource file `PT_Sans-Narrow-Web-Bold.ttf`.
    static let pt_SansNarrowWebBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "PT_Sans-Narrow-Web-Bold", pathExtension: "ttf")
    /// Resource file `PT_Sans-Narrow-Web-Regular.ttf`.
    static let pt_SansNarrowWebRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "PT_Sans-Narrow-Web-Regular", pathExtension: "ttf")
    /// Resource file `Robaga Rounded Bold.otf`.
    static let robagaRoundedBoldOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Robaga Rounded Bold", pathExtension: "otf")
    /// Resource file `YanoneKaffeesatz-Bold.ttf`.
    static let yanoneKaffeesatzBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "YanoneKaffeesatz-Bold", pathExtension: "ttf")
    /// Resource file `YanoneKaffeesatz-Regular.ttf`.
    static let yanoneKaffeesatzRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "YanoneKaffeesatz-Regular", pathExtension: "ttf")
    /// Resource file `robaga-rounded.regular.otf`.
    static let robagaRoundedRegularOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "robaga-rounded.regular", pathExtension: "otf")
    
    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "PT_Sans-Narrow-Web-Bold", withExtension: "ttf")`
    static func pt_SansNarrowWebBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.pt_SansNarrowWebBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "PT_Sans-Narrow-Web-Regular", withExtension: "ttf")`
    static func pt_SansNarrowWebRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.pt_SansNarrowWebRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Robaga Rounded Bold", withExtension: "otf")`
    static func robagaRoundedBoldOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robagaRoundedBoldOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "YanoneKaffeesatz-Bold", withExtension: "ttf")`
    static func yanoneKaffeesatzBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.yanoneKaffeesatzBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "YanoneKaffeesatz-Regular", withExtension: "ttf")`
    static func yanoneKaffeesatzRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.yanoneKaffeesatzRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "robaga-rounded.regular", withExtension: "otf")`
    static func robagaRoundedRegularOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robagaRoundedRegularOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 6 fonts.
  struct font: Rswift.Validatable {
    /// Font `PTSans-NarrowBold`.
    static let ptSansNarrowBold = Rswift.FontResource(fontName: "PTSans-NarrowBold")
    /// Font `PTSans-Narrow`.
    static let ptSansNarrow = Rswift.FontResource(fontName: "PTSans-Narrow")
    /// Font `RobagaRounded-Bold`.
    static let robagaRoundedBold = Rswift.FontResource(fontName: "RobagaRounded-Bold")
    /// Font `RobagaRounded`.
    static let robagaRounded = Rswift.FontResource(fontName: "RobagaRounded")
    /// Font `YanoneKaffeesatz-Bold`.
    static let yanoneKaffeesatzBold = Rswift.FontResource(fontName: "YanoneKaffeesatz-Bold")
    /// Font `YanoneKaffeesatz-Regular`.
    static let yanoneKaffeesatzRegular = Rswift.FontResource(fontName: "YanoneKaffeesatz-Regular")
    
    /// `UIFont(name: "PTSans-Narrow", size: ...)`
    static func ptSansNarrow(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: ptSansNarrow, size: size)
    }
    
    /// `UIFont(name: "PTSans-NarrowBold", size: ...)`
    static func ptSansNarrowBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: ptSansNarrowBold, size: size)
    }
    
    /// `UIFont(name: "RobagaRounded", size: ...)`
    static func robagaRounded(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robagaRounded, size: size)
    }
    
    /// `UIFont(name: "RobagaRounded-Bold", size: ...)`
    static func robagaRoundedBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robagaRoundedBold, size: size)
    }
    
    /// `UIFont(name: "YanoneKaffeesatz-Bold", size: ...)`
    static func yanoneKaffeesatzBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: yanoneKaffeesatzBold, size: size)
    }
    
    /// `UIFont(name: "YanoneKaffeesatz-Regular", size: ...)`
    static func yanoneKaffeesatzRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: yanoneKaffeesatzRegular, size: size)
    }
    
    static func validate() throws {
      if R.font.yanoneKaffeesatzRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'YanoneKaffeesatz-Regular' could not be loaded, is 'YanoneKaffeesatz-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robagaRoundedBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'RobagaRounded-Bold' could not be loaded, is 'Robaga Rounded Bold.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.ptSansNarrowBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'PTSans-NarrowBold' could not be loaded, is 'PT_Sans-Narrow-Web-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robagaRounded(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'RobagaRounded' could not be loaded, is 'robaga-rounded.regular.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.ptSansNarrow(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'PTSans-Narrow' could not be loaded, is 'PT_Sans-Narrow-Web-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.yanoneKaffeesatzBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'YanoneKaffeesatz-Bold' could not be loaded, is 'YanoneKaffeesatz-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }
    
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 10 images.
  struct image {
    /// Image `Back Button`.
    static let backButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "Back Button")
    /// Image `Delete Button`.
    static let deleteButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "Delete Button")
    /// Image `back`.
    static let back = Rswift.ImageResource(bundle: R.hostingBundle, name: "back")
    /// Image `closeButton`.
    static let closeButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "closeButton")
    /// Image `down-arrow-square-button copy`.
    static let downArrowSquareButtonCopy = Rswift.ImageResource(bundle: R.hostingBundle, name: "down-arrow-square-button copy")
    /// Image `sad face`.
    static let sadFace = Rswift.ImageResource(bundle: R.hostingBundle, name: "sad face")
    /// Image `scan button`.
    static let scanButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "scan button")
    /// Image `search button`.
    static let searchButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "search button")
    /// Image `shop_background`.
    static let shop_background = Rswift.ImageResource(bundle: R.hostingBundle, name: "shop_background")
    /// Image `store button`.
    static let storeButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "store button")
    
    /// `UIImage(named: "Back Button", bundle: ..., traitCollection: ...)`
    static func backButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.backButton, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Delete Button", bundle: ..., traitCollection: ...)`
    static func deleteButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.deleteButton, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "back", bundle: ..., traitCollection: ...)`
    static func back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.back, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "closeButton", bundle: ..., traitCollection: ...)`
    static func closeButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.closeButton, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "down-arrow-square-button copy", bundle: ..., traitCollection: ...)`
    static func downArrowSquareButtonCopy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.downArrowSquareButtonCopy, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "sad face", bundle: ..., traitCollection: ...)`
    static func sadFace(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sadFace, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "scan button", bundle: ..., traitCollection: ...)`
    static func scanButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.scanButton, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "search button", bundle: ..., traitCollection: ...)`
    static func searchButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.searchButton, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "shop_background", bundle: ..., traitCollection: ...)`
    static func shop_background(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.shop_background, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "store button", bundle: ..., traitCollection: ...)`
    static func storeButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.storeButton, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 8 nibs.
  struct nib {
    /// Nib `AddCell`.
    static let addCell = _R.nib._AddCell()
    /// Nib `HeaderView`.
    static let headerView = _R.nib._HeaderView()
    /// Nib `IssueVC`.
    static let issueVC = _R.nib._IssueVC()
    /// Nib `ItemListCell`.
    static let itemListCell = _R.nib._ItemListCell()
    /// Nib `OutletCell`.
    static let outletCell = _R.nib._OutletCell()
    /// Nib `PriceStatisticCell`.
    static let priceStatisticCell = _R.nib._PriceStatisticCell()
    /// Nib `ShopItemCell`.
    static let shopItemCell = _R.nib._ShopItemCell()
    /// Nib `navigationView`.
    static let navigationView = _R.nib._navigationView()
    
    /// `UINib(name: "AddCell", in: bundle)`
    static func addCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.addCell)
    }
    
    /// `UINib(name: "HeaderView", in: bundle)`
    static func headerView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.headerView)
    }
    
    /// `UINib(name: "IssueVC", in: bundle)`
    static func issueVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.issueVC)
    }
    
    /// `UINib(name: "ItemListCell", in: bundle)`
    static func itemListCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.itemListCell)
    }
    
    /// `UINib(name: "OutletCell", in: bundle)`
    static func outletCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.outletCell)
    }
    
    /// `UINib(name: "PriceStatisticCell", in: bundle)`
    static func priceStatisticCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.priceStatisticCell)
    }
    
    /// `UINib(name: "ShopItemCell", in: bundle)`
    static func shopItemCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.shopItemCell)
    }
    
    /// `UINib(name: "navigationView", in: bundle)`
    static func navigationView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.navigationView)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 1 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `ItemCell`.
    static let itemCell: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "ItemCell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 3 localization tables.
  struct string {
    /// This `R.string.launchScreen` struct is generated, and contains static references to 0 localization keys.
    struct launchScreen {
      fileprivate init() {}
    }
    
    /// This `R.string.localizable` struct is generated, and contains static references to 48 localization keys.
    struct localizable {
      /// en translation: %@ actual prices
      /// 
      /// Locales: en, ru
      static let sync_process_prices = Rswift.StringResource(key: "sync_process_prices", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: %@ categories
      /// 
      /// Locales: en, ru
      static let sync_process_categories = Rswift.StringResource(key: "sync_process_categories", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: %@ goods
      /// 
      /// Locales: en, ru
      static let sync_process_products = Rswift.StringResource(key: "sync_process_products", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: %@ km
      /// 
      /// Locales: en, ru
      static let outlet_list_km = Rswift.StringResource(key: "outlet_list_km", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: %@ m
      /// 
      /// Locales: en, ru
      static let outlet_list_m = Rswift.StringResource(key: "outlet_list_m", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: %@ measurement units
      /// 
      /// Locales: en, ru
      static let sync_process_uom = Rswift.StringResource(key: "sync_process_uom", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: %@ your shop list
      /// 
      /// Locales: en, ru
      static let sync_process_shoplist = Rswift.StringResource(key: "sync_process_shoplist", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Add new product
      /// 
      /// Locales: en, ru
      static let item_list_add_new = Rswift.StringResource(key: "item_list_add_new", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Already in the list
      /// 
      /// Locales: en, ru
      static let common_already_in_list = Rswift.StringResource(key: "common_already_in_list", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Begin synchronization
      /// 
      /// Locales: en, ru
      static let sync_process_start = Rswift.StringResource(key: "sync_process_start", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Clean shop list? 🧐
      /// 
      /// Locales: en, ru
      static let shoplist_clean = Rswift.StringResource(key: "shoplist_clean", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Connecting to the Cloud
      /// 
      /// Locales: en, ru
      static let sync_process_connecting = Rswift.StringResource(key: "sync_process_connecting", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Done
      /// 
      /// Locales: en, ru
      static let common_done = Rswift.StringResource(key: "common_done", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Fill out the product name 👿 !!!
      /// 
      /// Locales: en, ru
      static let empty_product_name = Rswift.StringResource(key: "empty_product_name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Getting the current price
      /// 
      /// Locales: en, ru
      static let getting_actual_price = Rswift.StringResource(key: "getting_actual_price", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Good news: Products uploaded!!!🤘, but:
      /// 
      /// Locales: en, ru
      static let common_good_news = Rswift.StringResource(key: "common_good_news", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: It is not necessary
      /// 
      /// Locales: en, ru
      static let common_not_necessary = Rswift.StringResource(key: "common_not_necessary", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Let's start
      /// 
      /// Locales: en, ru
      static let common_lets_get_start = Rswift.StringResource(key: "common_lets_get_start", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: List of products
      /// 
      /// Locales: en, ru
      static let item_list = Rswift.StringResource(key: "item_list", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Loading
      /// 
      /// Locales: en, ru
      static let common_loading = Rswift.StringResource(key: "common_loading", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Loading outlets
      /// 
      /// Locales: en, ru
      static let outlet_loading = Rswift.StringResource(key: "outlet_loading", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Loading products and prices from the cloud, please wait ...
      /// 
      /// Locales: en, ru
      static let sync_process = Rswift.StringResource(key: "sync_process", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Looking for the nearest stores ...
      /// 
      /// Locales: en, ru
      static let outlet_looking = Rswift.StringResource(key: "outlet_looking", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Next
      /// 
      /// Locales: en, ru
      static let common_next = Rswift.StringResource(key: "common_next", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: No products in database
      /// 
      /// Locales: en, ru
      static let item_list_empty = Rswift.StringResource(key: "item_list_empty", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: No shops
      /// 
      /// Locales: en, ru
      static let outlet_list_no_stores = Rswift.StringResource(key: "outlet_list_no_stores", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: No stores found around you 😢
      /// 
      /// Locales: en, ru
      static let error_stores_is_not_found_around_you = Rswift.StringResource(key: "error_stores_is_not_found_around_you", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Oh
      /// 
      /// Locales: en, ru
      static let common_ups = Rswift.StringResource(key: "common_ups", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Please try again later
      /// 
      /// Locales: en, ru
      static let common_try_later = Rswift.StringResource(key: "common_try_later", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Please, choose store
      /// 
      /// Locales: en, ru
      static let shoplist_please_choose_outlet = Rswift.StringResource(key: "shoplist_please_choose_outlet", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Product not found in database
      /// 
      /// Locales: en, ru
      static let error_product_is_not_found = Rswift.StringResource(key: "error_product_is_not_found", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Qty:
      /// 
      /// Locales: en, ru
      static let shop_list_quantity = Rswift.StringResource(key: "shop_list_quantity", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Search for a store
      /// 
      /// Locales: en, ru
      static let outlet_list_search = Rswift.StringResource(key: "outlet_list_search", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Something went wrong
      /// 
      /// Locales: en, ru
      static let error_something_went_wrong = Rswift.StringResource(key: "error_something_went_wrong", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Start looking for a store
      /// 
      /// Locales: en, ru
      static let outlet_list_start_to_search_store = Rswift.StringResource(key: "outlet_list_start_to_search_store", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Start to search for a product
      /// 
      /// Locales: en, ru
      static let item_list_start_to_search_product = Rswift.StringResource(key: "item_list_start_to_search_product", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Synchronization failed:
      /// 
      /// Locales: en, ru
      static let error_sync_stopped = Rswift.StringResource(key: "error_sync_stopped", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Thank you
      /// 
      /// Locales: en, ru
      static let thank_you = Rswift.StringResource(key: "thank_you", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: The price has not changed😉. Cool! 👍
      /// 
      /// Locales: en, ru
      static let price_update_not_changed = Rswift.StringResource(key: "price_update_not_changed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: There are no statistics
      /// 
      /// Locales: en, ru
      static let error_no_statistics = Rswift.StringResource(key: "error_no_statistics", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Today the goods in the database are already
      /// 
      /// Locales: en, ru
      static let base_statistics_products_in_base_today = Rswift.StringResource(key: "base_statistics_products_in_base_today", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Total:
      /// 
      /// Locales: en, ru
      static let common_total = Rswift.StringResource(key: "common_total", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Try again
      /// 
      /// Locales: en, ru
      static let try_again = Rswift.StringResource(key: "try_again", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: We can not find stores near you. You restricted monitoring your position. Enable in the settings to use the program 😢
      /// 
      /// Locales: en, ru
      static let no_gps_access = Rswift.StringResource(key: "no_gps_access", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: We can not keep this price 😭. But the goods in the database and shopping list😉
      /// 
      /// Locales: en, ru
      static let update_price_we_cant_update = Rswift.StringResource(key: "update_price_we_cant_update", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Wow
      /// 
      /// Locales: en, ru
      static let common_wow = Rswift.StringResource(key: "common_wow", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: You're ready to go!
      /// 
      /// Locales: en, ru
      static let sync_process_all_is_done = Rswift.StringResource(key: "sync_process_all_is_done", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: the best: %@
      /// 
      /// Locales: en, ru
      static let item_list_best_price = Rswift.StringResource(key: "item_list_best_price", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      
      /// en translation: %@ actual prices
      /// 
      /// Locales: en, ru
      static func sync_process_prices(_ value1: String) -> String {
        return String(format: NSLocalizedString("sync_process_prices", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: %@ categories
      /// 
      /// Locales: en, ru
      static func sync_process_categories(_ value1: String) -> String {
        return String(format: NSLocalizedString("sync_process_categories", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: %@ goods
      /// 
      /// Locales: en, ru
      static func sync_process_products(_ value1: String) -> String {
        return String(format: NSLocalizedString("sync_process_products", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: %@ km
      /// 
      /// Locales: en, ru
      static func outlet_list_km(_ value1: String) -> String {
        return String(format: NSLocalizedString("outlet_list_km", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: %@ m
      /// 
      /// Locales: en, ru
      static func outlet_list_m(_ value1: String) -> String {
        return String(format: NSLocalizedString("outlet_list_m", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: %@ measurement units
      /// 
      /// Locales: en, ru
      static func sync_process_uom(_ value1: String) -> String {
        return String(format: NSLocalizedString("sync_process_uom", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: %@ your shop list
      /// 
      /// Locales: en, ru
      static func sync_process_shoplist(_ value1: String) -> String {
        return String(format: NSLocalizedString("sync_process_shoplist", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: Add new product
      /// 
      /// Locales: en, ru
      static func item_list_add_new(_: Void = ()) -> String {
        return NSLocalizedString("item_list_add_new", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Already in the list
      /// 
      /// Locales: en, ru
      static func common_already_in_list(_: Void = ()) -> String {
        return NSLocalizedString("common_already_in_list", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Begin synchronization
      /// 
      /// Locales: en, ru
      static func sync_process_start(_: Void = ()) -> String {
        return NSLocalizedString("sync_process_start", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Clean shop list? 🧐
      /// 
      /// Locales: en, ru
      static func shoplist_clean(_: Void = ()) -> String {
        return NSLocalizedString("shoplist_clean", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Connecting to the Cloud
      /// 
      /// Locales: en, ru
      static func sync_process_connecting(_: Void = ()) -> String {
        return NSLocalizedString("sync_process_connecting", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Done
      /// 
      /// Locales: en, ru
      static func common_done(_: Void = ()) -> String {
        return NSLocalizedString("common_done", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Fill out the product name 👿 !!!
      /// 
      /// Locales: en, ru
      static func empty_product_name(_: Void = ()) -> String {
        return NSLocalizedString("empty_product_name", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Getting the current price
      /// 
      /// Locales: en, ru
      static func getting_actual_price(_: Void = ()) -> String {
        return NSLocalizedString("getting_actual_price", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Good news: Products uploaded!!!🤘, but:
      /// 
      /// Locales: en, ru
      static func common_good_news(_: Void = ()) -> String {
        return NSLocalizedString("common_good_news", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: It is not necessary
      /// 
      /// Locales: en, ru
      static func common_not_necessary(_: Void = ()) -> String {
        return NSLocalizedString("common_not_necessary", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Let's start
      /// 
      /// Locales: en, ru
      static func common_lets_get_start(_: Void = ()) -> String {
        return NSLocalizedString("common_lets_get_start", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: List of products
      /// 
      /// Locales: en, ru
      static func item_list(_: Void = ()) -> String {
        return NSLocalizedString("item_list", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Loading
      /// 
      /// Locales: en, ru
      static func common_loading(_: Void = ()) -> String {
        return NSLocalizedString("common_loading", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Loading outlets
      /// 
      /// Locales: en, ru
      static func outlet_loading(_: Void = ()) -> String {
        return NSLocalizedString("outlet_loading", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Loading products and prices from the cloud, please wait ...
      /// 
      /// Locales: en, ru
      static func sync_process(_: Void = ()) -> String {
        return NSLocalizedString("sync_process", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Looking for the nearest stores ...
      /// 
      /// Locales: en, ru
      static func outlet_looking(_: Void = ()) -> String {
        return NSLocalizedString("outlet_looking", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Next
      /// 
      /// Locales: en, ru
      static func common_next(_: Void = ()) -> String {
        return NSLocalizedString("common_next", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: No products in database
      /// 
      /// Locales: en, ru
      static func item_list_empty(_: Void = ()) -> String {
        return NSLocalizedString("item_list_empty", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: No shops
      /// 
      /// Locales: en, ru
      static func outlet_list_no_stores(_: Void = ()) -> String {
        return NSLocalizedString("outlet_list_no_stores", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: No stores found around you 😢
      /// 
      /// Locales: en, ru
      static func error_stores_is_not_found_around_you(_: Void = ()) -> String {
        return NSLocalizedString("error_stores_is_not_found_around_you", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Oh
      /// 
      /// Locales: en, ru
      static func common_ups(_: Void = ()) -> String {
        return NSLocalizedString("common_ups", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please try again later
      /// 
      /// Locales: en, ru
      static func common_try_later(_: Void = ()) -> String {
        return NSLocalizedString("common_try_later", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please, choose store
      /// 
      /// Locales: en, ru
      static func shoplist_please_choose_outlet(_: Void = ()) -> String {
        return NSLocalizedString("shoplist_please_choose_outlet", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Product not found in database
      /// 
      /// Locales: en, ru
      static func error_product_is_not_found(_: Void = ()) -> String {
        return NSLocalizedString("error_product_is_not_found", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Qty:
      /// 
      /// Locales: en, ru
      static func shop_list_quantity(_: Void = ()) -> String {
        return NSLocalizedString("shop_list_quantity", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Search for a store
      /// 
      /// Locales: en, ru
      static func outlet_list_search(_: Void = ()) -> String {
        return NSLocalizedString("outlet_list_search", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Something went wrong
      /// 
      /// Locales: en, ru
      static func error_something_went_wrong(_: Void = ()) -> String {
        return NSLocalizedString("error_something_went_wrong", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Start looking for a store
      /// 
      /// Locales: en, ru
      static func outlet_list_start_to_search_store(_: Void = ()) -> String {
        return NSLocalizedString("outlet_list_start_to_search_store", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Start to search for a product
      /// 
      /// Locales: en, ru
      static func item_list_start_to_search_product(_: Void = ()) -> String {
        return NSLocalizedString("item_list_start_to_search_product", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Synchronization failed:
      /// 
      /// Locales: en, ru
      static func error_sync_stopped(_: Void = ()) -> String {
        return NSLocalizedString("error_sync_stopped", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Thank you
      /// 
      /// Locales: en, ru
      static func thank_you(_: Void = ()) -> String {
        return NSLocalizedString("thank_you", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: The price has not changed😉. Cool! 👍
      /// 
      /// Locales: en, ru
      static func price_update_not_changed(_: Void = ()) -> String {
        return NSLocalizedString("price_update_not_changed", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: There are no statistics
      /// 
      /// Locales: en, ru
      static func error_no_statistics(_: Void = ()) -> String {
        return NSLocalizedString("error_no_statistics", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Today the goods in the database are already
      /// 
      /// Locales: en, ru
      static func base_statistics_products_in_base_today(_: Void = ()) -> String {
        return NSLocalizedString("base_statistics_products_in_base_today", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Total:
      /// 
      /// Locales: en, ru
      static func common_total(_: Void = ()) -> String {
        return NSLocalizedString("common_total", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Try again
      /// 
      /// Locales: en, ru
      static func try_again(_: Void = ()) -> String {
        return NSLocalizedString("try_again", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: We can not find stores near you. You restricted monitoring your position. Enable in the settings to use the program 😢
      /// 
      /// Locales: en, ru
      static func no_gps_access(_: Void = ()) -> String {
        return NSLocalizedString("no_gps_access", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: We can not keep this price 😭. But the goods in the database and shopping list😉
      /// 
      /// Locales: en, ru
      static func update_price_we_cant_update(_: Void = ()) -> String {
        return NSLocalizedString("update_price_we_cant_update", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Wow
      /// 
      /// Locales: en, ru
      static func common_wow(_: Void = ()) -> String {
        return NSLocalizedString("common_wow", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: You're ready to go!
      /// 
      /// Locales: en, ru
      static func sync_process_all_is_done(_: Void = ()) -> String {
        return NSLocalizedString("sync_process_all_is_done", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: the best: %@
      /// 
      /// Locales: en, ru
      static func item_list_best_price(_ value1: String) -> String {
        return String(format: NSLocalizedString("item_list_best_price", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.main` struct is generated, and contains static references to 30 localization keys.
    struct main {
      /// ru translation:   Вы не разрешили использовать gps-позицию. Убедитесь, что программе дан доступ как показано ниже в "Конфиденциальность" 😥
      /// 
      /// Locales: ru, en
      static let jIbU6VeVText = Rswift.StringResource(key: "JIb-u6-VeV.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// ru translation:   Вы не разрешили использовать камеру. Убедитесь, что камере дан доступ как показано ниже в "Конфиденциальность" 😥
      /// 
      /// Locales: ru, en
      static let hb9WtSqyText = Rswift.StringResource(key: "Hb9-Wt-sqy.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// ru translation:   Вы не разрешили использовать камеру. Убедитесь, что камере дан доступ как показано ниже в "Конфиденциальность" 😥
      /// 
      /// Locales: ru, en
      static let y8G3fCq5Text = Rswift.StringResource(key: "y8G-3f-Cq5.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// ru translation: 0.450
      /// 
      /// Locales: ru, en
      static let l4kDbRqWNormalTitle = Rswift.StringResource(key: "l4k-db-rqW.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// ru translation: 29,98 грн.
      /// 
      /// Locales: ru, en
      static let dv6EkKbzText = Rswift.StringResource(key: "DV6-ek-kbz.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// ru translation: 65,90
      /// 
      /// Locales: ru, en
      static let tncIkMx3Text = Rswift.StringResource(key: "TNC-Ik-Mx3.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// ru translation: 65.98
      /// 
      /// Locales: ru, en
      static let ufx5zNAdText = Rswift.StringResource(key: "Ufx-5z-nAd.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// ru translation: 900 м
      /// 
      /// Locales: ru, en
      static let ej2WG7qGText = Rswift.StringResource(key: "EJ2-WG-7qG.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// ru translation: Button
      /// 
      /// Locales: ru, en
      static let b7S44fBNormalTitle = Rswift.StringResource(key: "2b7-S4-4fB.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// ru translation: Введите название товара
      /// 
      /// Locales: ru, en
      static let qj34MN7CPlaceholder = Rswift.StringResource(key: "QJ3-4M-n7C.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// ru translation: Ед-ца измерения
      /// 
      /// Locales: ru, en
      static let sjlbxi9NormalTitle = Rswift.StringResource(key: "1SJ-lB-xI9.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// ru translation: Заполните название
      /// 
      /// Locales: ru, en
      static let qff2fMBrPlaceholder = Rswift.StringResource(key: "Qff-2f-mBr.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// ru translation: Здолбуновская 13Г
      /// 
      /// Locales: ru, en
      static let fpeNAUrdText = Rswift.StringResource(key: "Fpe-nA-Urd.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// ru translation: Итого
      /// 
      /// Locales: ru, en
      static let eUfGNOzEText = Rswift.StringResource(key: "eUf-GN-OzE.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// ru translation: Итого: 0, 00
      /// 
      /// Locales: ru, en
      static let yULIdLemText = Rswift.StringResource(key: "yUL-id-lem.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// ru translation: Киев, Здолбуновская, 13Д
      /// 
      /// Locales: ru, en
      static let soA8TeaText = Rswift.StringResource(key: "2so-a8-Tea.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// ru translation: Колво:
      /// 
      /// Locales: ru, en
      static let i3YSMOyuText = Rswift.StringResource(key: "i3Y-sM-oyu.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// ru translation: Наведите камеру на штрихкод
      /// 
      /// Locales: ru, en
      static let l2VI2H2FText = Rswift.StringResource(key: "L2V-i2-H2F.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// ru translation: Овощи и фрукты
      /// 
      /// Locales: ru, en
      static let zNM1tENormalTitle = Rswift.StringResource(key: "41z-nM-1tE.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// ru translation: Помидоры
      /// 
      /// Locales: ru, en
      static let lDdR2V6TText = Rswift.StringResource(key: "LDd-r2-V6T.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// ru translation: Помидоры
      /// 
      /// Locales: ru, en
      static let qInDAITDText = Rswift.StringResource(key: "QIn-DA-iTD.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// ru translation: Сильпо
      /// 
      /// Locales: ru, en
      static let p6WVMLYPNormalTitle = Rswift.StringResource(key: "p6W-vM-LYP.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// ru translation: Сильпо
      /// 
      /// Locales: ru, en
      static let regop2yqText = Rswift.StringResource(key: "REG-oP-2yq.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// ru translation: Товары
      /// 
      /// Locales: ru, en
      static let hUcRiRgTText = Rswift.StringResource(key: "hUc-ri-rgT.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// ru translation: Торговые точки
      /// 
      /// Locales: ru, en
      static let sR4XoFoaText = Rswift.StringResource(key: "sR4-xo-foa.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// ru translation: Цена:
      /// 
      /// Locales: ru, en
      static let wzXiKLcText = Rswift.StringResource(key: "4wz-xi-KLc.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// ru translation: за
      /// 
      /// Locales: ru, en
      static let gOzFXOctText = Rswift.StringResource(key: "gOz-fX-oct.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// ru translation: мин: 29.5 грн
      /// 
      /// Locales: ru, en
      static let sKY0bWBpText = Rswift.StringResource(key: "sKY-0b-wBp.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// ru translation: цена: 36.5 грн
      /// 
      /// Locales: ru, en
      static let skqMu38jText = Rswift.StringResource(key: "skq-Mu-38j.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// ru translation: шт
      /// 
      /// Locales: ru, en
      static let dETaARZText = Rswift.StringResource(key: "9dE-ta-ARZ.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      
      /// ru translation:   Вы не разрешили использовать gps-позицию. Убедитесь, что программе дан доступ как показано ниже в "Конфиденциальность" 😥
      /// 
      /// Locales: ru, en
      static func jIbU6VeVText(_: Void = ()) -> String {
        return NSLocalizedString("JIb-u6-VeV.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation:   Вы не разрешили использовать камеру. Убедитесь, что камере дан доступ как показано ниже в "Конфиденциальность" 😥
      /// 
      /// Locales: ru, en
      static func hb9WtSqyText(_: Void = ()) -> String {
        return NSLocalizedString("Hb9-Wt-sqy.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation:   Вы не разрешили использовать камеру. Убедитесь, что камере дан доступ как показано ниже в "Конфиденциальность" 😥
      /// 
      /// Locales: ru, en
      static func y8G3fCq5Text(_: Void = ()) -> String {
        return NSLocalizedString("y8G-3f-Cq5.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: 0.450
      /// 
      /// Locales: ru, en
      static func l4kDbRqWNormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("l4k-db-rqW.normalTitle", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: 29,98 грн.
      /// 
      /// Locales: ru, en
      static func dv6EkKbzText(_: Void = ()) -> String {
        return NSLocalizedString("DV6-ek-kbz.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: 65,90
      /// 
      /// Locales: ru, en
      static func tncIkMx3Text(_: Void = ()) -> String {
        return NSLocalizedString("TNC-Ik-Mx3.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: 65.98
      /// 
      /// Locales: ru, en
      static func ufx5zNAdText(_: Void = ()) -> String {
        return NSLocalizedString("Ufx-5z-nAd.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: 900 м
      /// 
      /// Locales: ru, en
      static func ej2WG7qGText(_: Void = ()) -> String {
        return NSLocalizedString("EJ2-WG-7qG.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Button
      /// 
      /// Locales: ru, en
      static func b7S44fBNormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("2b7-S4-4fB.normalTitle", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Введите название товара
      /// 
      /// Locales: ru, en
      static func qj34MN7CPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("QJ3-4M-n7C.placeholder", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Ед-ца измерения
      /// 
      /// Locales: ru, en
      static func sjlbxi9NormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("1SJ-lB-xI9.normalTitle", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Заполните название
      /// 
      /// Locales: ru, en
      static func qff2fMBrPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("Qff-2f-mBr.placeholder", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Здолбуновская 13Г
      /// 
      /// Locales: ru, en
      static func fpeNAUrdText(_: Void = ()) -> String {
        return NSLocalizedString("Fpe-nA-Urd.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Итого
      /// 
      /// Locales: ru, en
      static func eUfGNOzEText(_: Void = ()) -> String {
        return NSLocalizedString("eUf-GN-OzE.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Итого: 0, 00
      /// 
      /// Locales: ru, en
      static func yULIdLemText(_: Void = ()) -> String {
        return NSLocalizedString("yUL-id-lem.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Киев, Здолбуновская, 13Д
      /// 
      /// Locales: ru, en
      static func soA8TeaText(_: Void = ()) -> String {
        return NSLocalizedString("2so-a8-Tea.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Колво:
      /// 
      /// Locales: ru, en
      static func i3YSMOyuText(_: Void = ()) -> String {
        return NSLocalizedString("i3Y-sM-oyu.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Наведите камеру на штрихкод
      /// 
      /// Locales: ru, en
      static func l2VI2H2FText(_: Void = ()) -> String {
        return NSLocalizedString("L2V-i2-H2F.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Овощи и фрукты
      /// 
      /// Locales: ru, en
      static func zNM1tENormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("41z-nM-1tE.normalTitle", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Помидоры
      /// 
      /// Locales: ru, en
      static func lDdR2V6TText(_: Void = ()) -> String {
        return NSLocalizedString("LDd-r2-V6T.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Помидоры
      /// 
      /// Locales: ru, en
      static func qInDAITDText(_: Void = ()) -> String {
        return NSLocalizedString("QIn-DA-iTD.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Сильпо
      /// 
      /// Locales: ru, en
      static func p6WVMLYPNormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("p6W-vM-LYP.normalTitle", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Сильпо
      /// 
      /// Locales: ru, en
      static func regop2yqText(_: Void = ()) -> String {
        return NSLocalizedString("REG-oP-2yq.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Товары
      /// 
      /// Locales: ru, en
      static func hUcRiRgTText(_: Void = ()) -> String {
        return NSLocalizedString("hUc-ri-rgT.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Торговые точки
      /// 
      /// Locales: ru, en
      static func sR4XoFoaText(_: Void = ()) -> String {
        return NSLocalizedString("sR4-xo-foa.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Цена:
      /// 
      /// Locales: ru, en
      static func wzXiKLcText(_: Void = ()) -> String {
        return NSLocalizedString("4wz-xi-KLc.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: за
      /// 
      /// Locales: ru, en
      static func gOzFXOctText(_: Void = ()) -> String {
        return NSLocalizedString("gOz-fX-oct.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: мин: 29.5 грн
      /// 
      /// Locales: ru, en
      static func sKY0bWBpText(_: Void = ()) -> String {
        return NSLocalizedString("sKY-0b-wBp.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: цена: 36.5 грн
      /// 
      /// Locales: ru, en
      static func skqMu38jText(_: Void = ()) -> String {
        return NSLocalizedString("skq-Mu-38j.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: шт
      /// 
      /// Locales: ru, en
      static func dETaARZText(_: Void = ()) -> String {
        return NSLocalizedString("9dE-ta-ARZ.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _IssueVC.validate()
    }
    
    struct _AddCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "AddCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> AddCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AddCell
      }
      
      fileprivate init() {}
    }
    
    struct _HeaderView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "HeaderView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> HeaderView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HeaderView
      }
      
      fileprivate init() {}
    }
    
    struct _IssueVC: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "IssueVC"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "sad face", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'sad face' is used in nib 'IssueVC', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _ItemListCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ItemListCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ItemListCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ItemListCell
      }
      
      fileprivate init() {}
    }
    
    struct _OutletCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "OutletCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> OutletCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OutletCell
      }
      
      fileprivate init() {}
    }
    
    struct _PriceStatisticCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "PriceStatisticCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> PriceStatisticCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PriceStatisticCell
      }
      
      fileprivate init() {}
    }
    
    struct _ShopItemCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ShopItemCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ShopItemCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ShopItemCell
      }
      
      fileprivate init() {}
    }
    
    struct _navigationView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "navigationView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> NavigationView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NavigationView
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try main.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let itemListVC = StoryboardViewControllerResource<ItemListVC>(identifier: "ItemListVC")
      let name = "Main"
      let outletsVC = StoryboardViewControllerResource<OutletsVC>(identifier: "OutletsVC")
      let scannerController = StoryboardViewControllerResource<ScannerController>(identifier: "ScannerController")
      let shopListController = StoryboardViewControllerResource<ShopListController>(identifier: "ShopListController")
      let updatePriceVC = StoryboardViewControllerResource<UpdatePriceVC>(identifier: "UpdatePriceVC")
      
      func itemListVC(_: Void = ()) -> ItemListVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: itemListVC)
      }
      
      func outletsVC(_: Void = ()) -> OutletsVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: outletsVC)
      }
      
      func scannerController(_: Void = ()) -> ScannerController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: scannerController)
      }
      
      func shopListController(_: Void = ()) -> ShopListController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: shopListController)
      }
      
      func updatePriceVC(_: Void = ()) -> UpdatePriceVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: updatePriceVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "back") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'back' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "shop_background") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'shop_background' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "scan button") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'scan button' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "closeButton") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'closeButton' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "down-arrow-square-button copy") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'down-arrow-square-button copy' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "search button") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'search button' is used in storyboard 'Main', but couldn't be loaded.") }
        if _R.storyboard.main().outletsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'outletsVC' could not be loaded from storyboard 'Main' as 'OutletsVC'.") }
        if _R.storyboard.main().itemListVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'itemListVC' could not be loaded from storyboard 'Main' as 'ItemListVC'.") }
        if _R.storyboard.main().shopListController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'shopListController' could not be loaded from storyboard 'Main' as 'ShopListController'.") }
        if _R.storyboard.main().updatePriceVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'updatePriceVC' could not be loaded from storyboard 'Main' as 'UpdatePriceVC'.") }
        if _R.storyboard.main().scannerController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'scannerController' could not be loaded from storyboard 'Main' as 'ScannerController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
